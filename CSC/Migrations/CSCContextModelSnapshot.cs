// <auto-generated />
using System;
using CSC.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CSC.Migrations
{
    [DbContext(typeof(CSCContext))]
    partial class CSCContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CSC.Models.Atendimento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Abertura");

                    b.Property<int>("AtendimentoTipo");

                    b.Property<int>("ClienteId");

                    b.Property<string>("Detalhes");

                    b.Property<DateTime>("Encerramento");

                    b.Property<int>("FuncionarioId");

                    b.Property<int?>("OrigemID");

                    b.Property<string>("Solicitante");

                    b.Property<int>("Status");

                    b.Property<int?>("TarefaId");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("FuncionarioId");

                    b.HasIndex("TarefaId");

                    b.ToTable("Atendimento");
                });

            modelBuilder.Entity("CSC.Models.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Bairro");

                    b.Property<string>("CEP");

                    b.Property<string>("CNPJ")
                        .IsRequired();

                    b.Property<string>("Cidade");

                    b.Property<DateTime>("DataInicio");

                    b.Property<string>("Email");

                    b.Property<string>("Logradouro");

                    b.Property<bool>("Mono");

                    b.Property<string>("NomeFantasia")
                        .IsRequired();

                    b.Property<int?>("Numero");

                    b.Property<string>("RazaoSocial")
                        .IsRequired();

                    b.Property<int>("Status");

                    b.Property<string>("Telefone");

                    b.HasKey("Id");

                    b.ToTable("Cliente");
                });

            modelBuilder.Entity("CSC.Models.Funcionario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Admissao");

                    b.Property<DateTime?>("Demissao");

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.Property<bool>("Veiculo");

                    b.HasKey("Id");

                    b.ToTable("Funcionario");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Admissao = new DateTime(2019, 7, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            Nome = "Admin",
                            Veiculo = false
                        });
                });

            modelBuilder.Entity("CSC.Models.Inventario", b =>
                {
                    b.Property<int>("ClienteID");

                    b.Property<int>("Software");

                    b.Property<int>("Quantidade");

                    b.HasKey("ClienteID", "Software");

                    b.ToTable("Inventario");
                });

            modelBuilder.Entity("CSC.Models.Tarefa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Abertura");

                    b.Property<DateTime?>("Conclusao");

                    b.Property<string>("Descricao")
                        .IsRequired();

                    b.Property<string>("TarefaNumero");

                    b.HasKey("Id");

                    b.ToTable("Tarefa");
                });

            modelBuilder.Entity("CSC.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FuncionarioId");

                    b.Property<string>("NomeLogon")
                        .IsRequired();

                    b.Property<string>("Senha")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("FuncionarioId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FuncionarioId = 1,
                            NomeLogon = "admin",
                            Senha = "2c84d6ef7d7d16c82eba6487caae5247b45d08555b45d0bc43af625def92a8d6"
                        });
                });

            modelBuilder.Entity("CSC.Models.Atendimento", b =>
                {
                    b.HasOne("CSC.Models.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CSC.Models.Funcionario", "Funcionario")
                        .WithMany()
                        .HasForeignKey("FuncionarioId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CSC.Models.Tarefa", "Tarefa")
                        .WithMany("Atendimentos")
                        .HasForeignKey("TarefaId");
                });

            modelBuilder.Entity("CSC.Models.Inventario", b =>
                {
                    b.HasOne("CSC.Models.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CSC.Models.User", b =>
                {
                    b.HasOne("CSC.Models.Funcionario", "Funcionario")
                        .WithMany()
                        .HasForeignKey("FuncionarioId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
